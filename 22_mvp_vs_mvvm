
Model View Presenter (MVP)
The MVP pattern is similar to the MVC pattern. It is derived from MVC pattern, wherein the controller is replaced by the presenter. 
This pattern divides an application into three major aspects: Model, View, and Presenter.

Model
The Model represents a set of classes that describes the business logic and data. It also defines business rules for data means how 
the data can be changed and manipulated.

View
View is a component which is directly interacts with user like XML, Activity, fragments. It does not contain any logic implemented.

Presenter
The Presenter receives the input from users via View, then process the user’s data with the help of Model and passing the results back 
to the View. Presenter communicates with view through interface. Interface is defined in presenter class, to which it pass the required
data. Activity/fragment or any other view component implement this interface and renders the data in a way they want.
In the MVP design pattern, the presenter manipulates the model and also updates the view. In MVP View and Presenter are completely 
decoupled from each other’s and communicate to each other’s by an interface. Because if decoupling mocking of the view is easier and unit testing of applications that leverage the MVP design pattern over the MVC design pattern are much easier.

Model View View-model (MVVM)
MVVM pattern supports two-way data binding between View and View-Model. This allows automatic propagation of changes, inside the 
state of View-Model to the View. Generally, the View-Model utilizes the observer pattern to inform changes in the View-Model to the 
Model.

View-Model
It is responsible for exposing methods, commands, and other properties that help to maintain the state of the view, manipulate the 
model as the result of actions on the view, and trigger events in the view itself. View has a reference to View-Model but View-Model 
has no information about the View. There is many-to-one relationship between View and View-Model means many Views can be mapped to one 
View-Model. It is completely independent of Views.
The bi-directional data binding or the two way data binding between the view and the View-Model ensures that the models and properties 
in the View-Model is in sync with the view. The MVVM design pattern is well suited in applications that need support for bi-directional 
data binding. 
It is kind of an implementation of Observer Design Pattern, where changes in the model are represented in the view as well, by the VM. 
Eg: If a slider is changed, not only the model is updated but the data which may be a text, that is displayed in the view is updated as 
well. So there is a two-way data binding.

Model (represents the data with validation and business logic)

View (The view is responsible for defining the structure, layout, and appearance of what the user sees on the screen. Ideally, the view 
is defined purely with XAML, with a limited code-behind that does not contain business logic.two way data-binding between the View and
view model.

Difference:-
ｷ	In MVP, there is one-to-one mapping between the View and Presenter, It means The View holds a reference to the Presenter. 
  The Presenter is also reacting to events being triggered from the View, so its aware of the View its associated with.
ｷ	in MVVM, the relationship is one-to-many between the View and ViewModel, It means While the View holds a reference to the View Model,
the View Model has no information about the View. This is why its possible to have a one-to-many mapping between various Views and one
View Model.
ｷ	The key difference between the MVP model and the MVVM lies in the way they update the view. The MVVM uses databinding to update the
view whereas the presenter uses traditional methods to update the view.
ｷ	There are two reasons for using MVVM. First is it can seprate business logic and presentation logic. Second is the code written in 
mvvm are reusable means we can put all logic in UI (in layout) using data layer and do all operations or core cod on view model. 
So we can reuse these viewmodel in other applications. Because in every application UI is diferent , and validation and clicking  etc. 
are manage in ui. In viewmodel  we implement only core code. So we can reuse view model in different-different projects.

Drawback of MVP
ｷ	Tight Coupling
For each Activity/Fragment (View) we require a Presenter. This is a hard bound rule. Presenter holds the reference to the Activity and 
Activity Holds the reference to presenter. 1:1 relationship and thats where the biggest issue lies. 
ViewModels are simples classes that interacts with the logic/model layer and just exposes states/data and actually has no idea by 
whom or how that data will be consumed. Only View(Activity) holds the reference to ViewModel and not vice versa, this solves our tight 
coupling issue. A single view can hold reference to multiple ViewModels.

ｷ	Testability
Since Presenters are hard bound to Views, writing unit test becomes slightly difficult as there is a dependency of a View.
ViewModels are even more Unit Test friendly as they just expose the state and hence can be independently tested without requiring the
need for testing how data will be consumed, In short there is no dependency of the View.
Ref:-  https://www.simform.com/mvc-mvp-mvvm-android-app-development/

