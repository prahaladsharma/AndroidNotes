Android MVVM (MVVM stands for Model, View, ViewModel)
Model: This holds the data of the application. It cannot directly talk to the View. Generally, it’s recommended to expose the data to the
ViewModel through Observables. Model represents the data and business logic of the app. One of the recommended implementation strategies
of this layer, is to expose its data through observables to be decoupled completely from ViewModel or any other observer/consumer 
(This will be illustrated in our MVVM sample app below).

View: It represents the UI of the application avoid of any Application Logic. It observes the ViewModel. Finally, the view role in this
pattern is to observe (or subscribe to) a ViewModel observable to get data in order to update UI elements accordingly.

ViewModel: It acts as a link between the Model and the ViewModel. It’s responsible for transforming the data from the Model. It provides
data streams to the View. It also uses hooks or callbacks to update the View. It’ll ask for the data from the Model. ViewModel interacts
with model and also prepares observable(s) that can be observed by a View. ViewModel can optionally provide hooks for the view to pass 
events to the model. One of the important implementation strategies of this layer is to decouple it from the View, i.e, ViewModel should
not be aware about the view who is interacting with.

Difff. between MVP and MVVM
For each Activity/Fragment (View) we require a Presenter. This is a hard bound rule. Presenter holds the reference to the Activity and
Activity Holds the reference to presenter. 1:1 relationship and thats where the biggest issue lies.

But in case MVVM, view does't know about viewmodel. so we can implement many modules on single viewmodel but not possiable in presenter.

Data Binding Library
The Data Binding Library is a support library that allows you to bind UI components in your layouts to data sources in your app using a 
declarative format rather than programmatically. It will remove the findViewById().
