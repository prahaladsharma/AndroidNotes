Comparable is in the implementation and not visible from the interface, so when you sort you don't really know what is going to happen. Comparator gives you reassurance that the ordering will be well defined.
compareTo() is from the Comparable interface.
compare() is from the Comparator interface.
The Comparable interface is used to impose a natural ordering on the objects of the implementing class. The compareTo() method is called the natural comparison method. The Comparator interface is used to impose a total ordering on the objects of the implementing class.

Comparable interface contains a method called compareTo(obj) which takes only one argument and it compares itself with another instance or objects of the same class.
Comparator interface contains a method called compare(obj1,obj2) which takes two arguments and it compares the value of two objects from the same or different classes.
Comparable is meant for objects with natural ordering which means the object itself must know how it is to be ordered. For example Roll Numbers of students. Whereas, Comparator interface sorting is done through a separate class.
Logically, Comparable interface compares “this” reference with the object specified and Comparator in Java compares two different class objects provided.
If any class implements Comparable interface in Java then collection of that object either List or Array can be sorted automatically by using Collections.sort() or Arrays.sort() method and objects will be sorted based on there natural order defined by CompareTo method.
 
Comparable Demo:-
public class ComparableDemo implements Comparable<ComparableDemo>{
	private int id;
	private int age;
	private String name;
	ComparableDemo(int id, int age, String name){
		this.id = id;
		this.age = age;
		this.name = name;
	}
	@Override
	public int compareTo(ComparableDemo emp) {
		if(age == emp.age){
			return 0;
		} else if(age > emp.age){
			return 1;
		} else {
			return -1;
		}
	}	
	 public static void main(String args[]){		 
		 ArrayList<ComparableDemo> emp = new ArrayList<>();
		 emp.add(new ComparableDemo(101, 22, "A"));
		 emp.add(new ComparableDemo(102, 20, "B"));
		 emp.add(new ComparableDemo(103, 29, "C"));
		 Collections.sort(emp);
		 for(ComparableDemo empl : emp){
		     System.out.println(empl.id + " " + empl.age + " " + empl.name);
		 }				 
	 }
 }
